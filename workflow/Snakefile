import os


configfile: f"{os.path.dirname(workflow.snakefile)}/../config/default_config.yaml"


include: "sample_table.smk"


rule all_gather:
    input:
        "Subspecies_profiles.h5"

rule sketch_reads:
    input:
        get_quality_controlled_reads,
        
    output:
        sketch="Intermediate/subspecies/sketch_samples/{sample}.sig",
    conda:
        "envs/sourmash.yaml"
    log:
        "log/subspecies_profiler/sketch_reads/{sample}.log",
    threads: config["threads"]
    resources:
        mem_mb=config["mem_default"]*1024,
        time_min=config["time_min"],
        cpus_per_task=config["threads"],
    params:
        kmer_len=config["kmer_len"],
        scaled=config["scaled"],
        mem=config["mem_default"]*1024 * 1000000 * 0.9, # bytes?
    shell:
        "mkdir -p output/sketch_samples "
        " ; \n "
        "sourmash sketch dna "
        " -p k={params.kmer_len},abund,scaled={params.scaled} "
        " {input}/*.fastq.gz "
        " --merge {wildcards.sample} "
        " -o {output.sketch} &> {log}"


rule gather:
    input:
        sample_sketch=rules.sketch_reads.output,
    output:
        gather="Intermediate/subspecies/gather/{sample}.csv",
    conda:
        "envs/sourmash.yaml"
    log:
        "log/subspecies_profiler/gather/{sample}.log",
    threads: 1
    resources:
        mem_mb=config["mem_default"],
        time_min=int(config["time_min"]),
    params:
        kmer_len=config["kmer_len"],
        scaled=config["scaled"],
        db_path=config["db_path"],
        threshold_bp=config["threshold_bp"],
        scaled_downsample=config["scaled_downsample"],
    shell:
        "mkdir -p output/gather && "
        "sourmash gather "
        " -k {params.kmer_len} "
        " --threshold-bp={params.threshold_bp} "
        " --scaled {params.scaled_downsample} "
        " -o {output.gather} "
        " {input.sample_sketch} "
        " {params.db_path} &> {log}"



rule merge_gather:
    input:
        expand("Intermediate/subspecies/gather/{sample}.csv", sample=SAMPLES)
    output:
        "Subspecies_profiles.h5"
    log:
        "log/subspecies_profiler/merge_gather.log"
    script:
        "scripts/merge_gather.py"
    





### pepulate resources for rules that don't have

for r in workflow.rules:
    if not "mem_mb" in r.resources:
        # default
        r.resources["mem_mb"] = config["mem_default"] * 1000

    # add time if ot present. Simple jobs use simple time

    if "time_min" not in r.resources:
        r.resources["time_min"] = config["time_default"] * 60

    if not "runtime" in r.resources:
        r.resources["runtime"] = r.resources["time_min"]
